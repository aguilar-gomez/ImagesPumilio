for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="green")
wAA <- 0.8
wAa <- 1
waa <- 0.7
ngen <- 300
fA <- numeric(ngen)
fA[1] <- 0.01
###KEY STARTING BELOW###
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)")
wAA <- 0.9
wAa <- 0.8
waa <- 1
ngen <- 100
fA <- numeric(ngen)
### KEY ###
fA[1] <- 0.6
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
fA[1] <- 0.7
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
par(new=F)
wAA <- 0.9
wAa <- 0.8
waa <- 1
ngen <- 100
fA <- numeric(ngen)
fA[1] <- 0.6
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
fA[1] <- 0.7
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
par(new=F)
# genotypic fitness
wAA <- 1
wAa <- # what is this if a is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <- 0.9
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "red")
legend(250,0.3,"A recessive",col="red",lty = 1)
# genotypic fitness
wAA <- 1
wAa <- # what is this if a is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <- 0.9
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "red")
legend(250,0.3,"A recessive",col="red",lty = 1)
wAA <- 1
wAa <-  # what is this if A is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <-  1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
par(new=T)
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "blue")
legend(250,0.2,"A dominant",col="blue",lty = 1)
wAA <- 1
wAa <-  # what is this if A is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <-  1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "blue")
legend(250,0.2,"A dominant",col="blue",lty = 1)
0.25 - (0.75*0.25)
0.25 - (0.75*0.75)
0.5 -0.75*0.75
7/9
.7/.9
0.4^2*(0.9/0.9) + 0.6^2(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
0.4^2*(0.9/0.9) + 0.6^2(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
0.4^2*(0.9/0.9) + 0.6^2*(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
fA=.4
fa=1-fA
wAA=.9
wAa=.8
waa=.7
w_bar = wAA*fA^2 + 2 * wAa * fA *fa + waa * fa^2
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wAa*afA
w_bar_A = wAA*fA+wAa*fA
fA_prime= (fA*w_bar_A)/w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa) ) / w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa)  / w_bar
w_bar_A*fA
( wAA * fA^2 + wAa * fA*fa)
( wAA * fA + wAa *fa)*fA
#w_bar_A= .68
w_bar_A = wAA*fA+wAa*fa
w_bar_A*fA
#Next gen
fA_prime= (fA*w_bar_A)/w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa)  / w_bar
rwAA=.9/wAA
rwAA=.9/wAA
rwAA=.9/wAA
rwAa=.8/wAA
rwaa=.7/wAA
#With relative
#w_bar= .78
rw_bar = rwAA*fA^2 + 2 * rwAa * fA *fa + rwaa * fa^2
#w_bar_A= .84
rw_bar_A = rwAA*fA+rwAa*fa
#Next gen fA=.43
rfA_prime= (fA*rw_bar_A)/rw_bar
rfA_prime2= ( rwAA * fA^2 + rwAa * fA*fa)  / rw_bar
0.9*0.4 + 0.8*(1-0.4)
35/92
57/92
50/92
53/92
55/92
56/92
0.005 / 0.005 + 0.77378 * (0.995)
0.005 / (0.005 + 0.77378 * 0.995)
52/92
62/92
.6*3
.6*5
218-3
215/218
1-.13
1-.013
76/91
77/91
77/92
fA <- 0.01fa <- 1-fA# relative fitness of alleleswA <- 1wa <- 0.99# selection coefficients <- wA-wat <-100### Code your answer herefA/(fA+(1-s)^t(fa))
fA <- 0.01fa <- 1-fA
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fa <- 1-fA
# relative fitness of alleles
wA <- 1wa <- 0.99
# selection coefficient
s <- wA-wat <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
# selection coefficient
s <- wA-wa
t <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
# selection coefficient
s <- wA-wa
# relative fitness of alleles
wA <- 1
wa <- 0.99
# selection coefficient
s <- wA-wa
t <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
### Code your answer here
fA/(fA+(1-s)^t*(fa))
pchisq(5.571008)
pchisq(5.571008,df=1)
pchisq(8.626967 ,df=1, lower.tail=FALSE)
library(recolorize)
img_cmr <- readImage("~/Documents/Opumilio/Samples/photos for Diana/CMR06_Br30.png",
resize=.65,rotate=270)
dim(img)
recolorize_cmr <- recolorize2(img_cmr,cutoff=5)
setwd("~/Documents/GitHub/frogFun")
img_cl <- readImage("sampleImages/Cemetery/Red/CM_UN_01-PD.png",
resize=.65,rotate=90)
recolorize_cl <- recolorize2(img_cl,cutoff=25)
img <- readImage("sampleImages/Cemetery/Red/CM_UN_02-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=25)
recolorize <- recolorize2(img,cutoff=5)
img <- readImage("sampleImages/Cemetery/Red/CMR01-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=5)
recolorize <- recolorize2(img,cutoff=2)
library(recolorize)
img <- readImage("sampleImages/Cemetery/Red/CMR01-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=2)
setwd("~/Documents/GitHub/frogFun")
library(patternize)
###
# load patternize library
###
library(patternize)
###
# The viridis package provides colour blind friendly colour schemes
###
# install.packages("viridis")
library(viridis)
# List with samples
IDlist <- c('BC0004',
'BC0049',
'BC0050',
'BC0071',
'BC0077',
'BC0079',
'BC0082',
'BC0125',
'BC0129',
'BC0366')
# make list with landmarks
prepath <- 'landmarks/Heliconius'
extension <- '_landmarks_LFW.txt'
landmarkList <- makeList(IDlist, 'landmark', prepath, extension)
# make list with images
prepath <- 'images/Heliconius'
extension <- '-D.jpg'
imageList <- makeList(IDlist, 'image', prepath, extension)
setwd("~/Documents/GitHub/patternize-examples")
# List with samples
IDlist <- c('BC0004',
'BC0049',
'BC0050',
'BC0071',
'BC0077',
'BC0079',
'BC0082',
'BC0125',
'BC0129',
'BC0366')
# make list with landmarks
prepath <- 'landmarks/Heliconius'
extension <- '_landmarks_LFW.txt'
landmarkList <- makeList(IDlist, 'landmark', prepath, extension)
# make list with images
prepath <- 'images/Heliconius'
extension <- '-D.jpg'
imageList <- makeList(IDlist, 'image', prepath, extension)
# run alignment of color patterns
RGB <- c(114,17,0) # red
rasterList_lanRGB <- patLanRGB(imageList, landmarkList, RGB, transformRef = 'BC0004', resampleFactor = 3,
colOffset = 0.15, crop = TRUE, res = 200, adjustCoords = TRUE, plot = 'stack')
# sum the colorpatterns
summedRaster_lanRGB <- sumRaster(rasterList_lanRGB, IDlist, type = 'RGB')
# plot heatmap
outline_BC0004 <- read.table('cartoon/BC0004_outline.txt', h= F)
lines_BC0004 <- list.files(path='cartoon', pattern='BC0004_vein', full.names = T)
# colfunc <- c("black","lightblue","blue","green", "yellow","red")
colfunc <- inferno(100)
plotHeat(summedRaster_lanRGB, IDlist, plotCartoon = TRUE, refShape = 'target', outline = outline_BC0004,
lines = lines_BC0004, landList = landmarkList, adjustCoords = TRUE, flipRaster = 'y',
imageList = imageList, cartoonID = 'BC0004', cartoonFill = 'black', cartoonOrder = 'under',
colpalette = colfunc)
# sum the colorpatterns
summedRaster_lanRGB <- sumRaster(rasterList_lanRGB, IDlist, type = 'RGB')
rasterList_lanRGB <- patLanRGB(imageList, landmarkList, RGB, transformRef = 'BC0004', resampleFactor = 3,
colOffset = 0.15, crop = TRUE, res = 200, adjustCoords = TRUE, plot = 'stack')
# If you don't want to run the function, you can load the saved output rasterList
# save(rasterList_lanRGB, file = 'output/Fig1_rasterList_lanRGB.rda')
load('output/Fig1_rasterList_lanRGB.rda')
# sum the colorpatterns
summedRaster_lanRGB <- sumRaster(rasterList_lanRGB, IDlist, type = 'RGB')
plotHeat(summedRaster_lanRGB, IDlist, plotCartoon = TRUE, refShape = 'target', outline = outline_BC0004,
lines = lines_BC0004, landList = landmarkList, adjustCoords = TRUE, flipRaster = 'y',
imageList = imageList, cartoonID = 'BC0004', cartoonFill = 'black', cartoonOrder = 'under',
colpalette = colfunc)
# colfunc <- c("black","lightblue","blue","green", "yellow","red")
colfunc <- inferno(100)
plotHeat(summedRaster_lanRGB, IDlist, plotCartoon = TRUE, refShape = 'target', outline = outline_BC0004,
lines = lines_BC0004, landList = landmarkList, adjustCoords = TRUE, flipRaster = 'y',
imageList = imageList, cartoonID = 'BC0004', cartoonFill = 'black', cartoonOrder = 'under',
colpalette = colfunc)
plotHeat(summedRaster_lanRGB, IDlist, plotCartoon = TRUE, refShape = 'target', outline = outline_BC0004,
lines = lines_BC0004, landList = landmarkList, adjustCoords = TRUE, flipRaster = 'y',
imageList = imageList, cartoonID = 'BC0004', cartoonFill = 'black', cartoonOrder = 'under',
colpalette = colfunc)
# colfunc <- c("black","lightblue","blue","green", "yellow","red")
colfunc <- inferno(100)
plotHeat(summedRaster_lanRGB, IDlist, plotCartoon = TRUE, refShape = 'target', outline = outline_BC0004,
lines = lines_BC0004, landList = landmarkList, adjustCoords = TRUE, flipRaster = 'y',
imageList = imageList, cartoonID = 'BC0004', cartoonFill = 'black', cartoonOrder = 'under',
colpalette = colfunc)
# make lists with images
prepath <- 'images/Guppies'
extension <- '.jpg'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
# Lists with samples
IDListWT <- c('cross20_F1fBC1_wtm_9472',
'cross20_F1fBC1_wtm_9471',
'cross20_F1fBC1_wtm_9470',
'cross20_F1fBC1_wtm_9469',
'cross20_F1fBC1_wtm_9131',
'cross20_F1fBC1_wtm_9130',
'cross20_F1fBC1_wtm_0319',
'cross20_F1fBC1_wtm_0318',
'cross20_F1fBC1_wtm_0317',
'cross20_F1fBC1_wtm_0316')
IDListG <- c('cross20_F1fBC1_whitem_1278',
'cross20_F1fBC5_whitem_1284',
'cross20_F1fBC2_whitem_7819',
'cross20_F1fBC2_whitem_7818',
'cross20_F1fBC2_whitem_7816',
'cross20_F1fBC2_whitem_7815',
'cross20_F1fBC3_whitem_1277',
'cross20_F1fBC1_whitem_1292',
'cross20_F1fBC1_whitem_1291',
'cross20_F1fBC1_whitem_1279')
# make lists with images
prepath <- 'images/Guppies'
extension <- '.jpg'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
imageListG <- makeList(IDListG, 'image', prepath, extension)
# choose target image
target <- imageListWT[['cross20_F1fBC1_wtm_9472']]
# read in the outline
outline_9472 <- read.table('cartoon/cross20_F1fBC1_wtm_9472_outline.txt', h= F)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target, k = 7, resampleFactor = 5, crop = c(200,2800,300,1800),
plot = TRUE, useBlockPercentage = 90, maskOutline = outline_9472, maskColor = 255)
rasterList_regKG <- patRegK(imageListG, target, k = 7, resampleFactor = 5, crop = c(200,2800,300,1800),
plot = TRUE, useBlockPercentage = 90, maskOutline = outline_9472, maskColor = 255)
IDListWT <- c("CL01","CL02","CL03","CL04","CL05",
"CL06","CL07","CL08","CL09","CL10",
"CL11","CL13","CL14","CL15","CL16")
# make lists with images
prepath <- 'ProcessedImages/BinaryGlare'
setwd("~/Documents/GitHub/frogFun")
IDListWT <- c("CL01","CL02","CL03","CL04","CL05",
"CL06","CL07","CL08","CL09","CL10",
"CL11","CL13","CL14","CL15","CL16")
# make lists with images
prepath <- 'ProcessedImages/BinaryGlare'
extension <- 'binary_glare.png'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
# make lists with images
prepath <- '/ProcessedImages/BinaryGlare'
extension <- 'binary_glare.png'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
# make lists with images
prepath <- '~/Documents/GitHub/frogFun/ProcessedImages/BinaryGlare'
extension <- 'binary_glare.png'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
IDListWT <- c("CL01_binary_glare","CL02_binary_glare","CL03_binary_glare","CL04_binary_glare","CL05_binary_glare",
"CL06_binary_glare","CL07_binary_glare","CL08_binary_glare","CL09_binary_glare","CL10_binary_glare",
"CL11_binary_glare","CL13_binary_glare","CL14_binary_glare","CL15_binary_glare","CL16_binary_glare")
# make lists with images
prepath <- '~/Documents/GitHub/frogFun/ProcessedImages/BinaryGlare'
extension <- '.png'
imageListWT <- makeList(IDListWT, 'image', prepath, extension)
# choose target image
target <- imageListWT[['CL01_binary_glare']]
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target, k = 7, resampleFactor = 5, crop = c(200,2800,300,1800),
plot = TRUE, useBlockPercentage = 90, maskColor = 255)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target, k = 7, resampleFactor = 5, crop = c(200,2800,300,1800),
plot = TRUE, useBlockPercentage = 90, maskColor = 255)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target,k=7)
imageListWT
imageListWT[['CL01_binary_glare']]
# choose target image
target <- imageListWT[['CL04_binary_glare']]
# read in the outline
outline_9472 <- read.table('cartoon/cross20_F1fBC1_wtm_9472_outline.txt', h= F)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT, target,k=7)
# run alignment of color patterns
rasterList_regKWT <- patRegW(imageListWT, target,k=7)
# run alignment of color patterns
rasterList_regKWT <- patRegW(imageListWT)
# run alignment of color patterns
rasterList_regKWT <- patRegW(imageListWT,target)
# run alignment of color patterns
rasterList_regKWT <- patRegW(imageListWT,target)
# run alignment of color patterns
rasterList_regKWT <- patRegK(imageListWT,target)
