}
### KEY BELOW ###
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
# Chunk 5
# Reproducing Fig. 7.2 from the book:
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)")
# Chunk 8
###KEY###
wAA <- 1
wAa <- 1
waa <- 0.1
ngen <- 100
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="red")
waa <- 0.5
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="blue")
waa <- 0.8
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="green")
# Chunk 9
wAA <- 0.8
wAa <- 1
waa <- 0.7
ngen <- 300
fA <- numeric(ngen)
fA[1] <- 0.01
###KEY STARTING BELOW###
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)")
# Chunk 10
wAA <- 0.9
wAa <- 0.8
waa <- 1
ngen <- 100
fA <- numeric(ngen)
### KEY ###
fA[1] <- 0.6
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
fA[1] <- 0.7
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
par(new=F)
# allele frequencies
fA <- 0.01
fa <- 1-fA
# relative fitness of alleles
wA <- 1
wa <- 0.99
# selection coefficient
s <- wA-wa
### KEY ###
t <- 100
(fAt <- fA/(fA+fa*(1-s)^t))
# allele frequencies
fA <- 0.01
fa <- 1-fA
# relative fitness of alleles
wA <- 1
wa <- 0.99
# selection coefficient
s <- 1-0.99
# Create a vector to store the allele frequencies in 1000 generations
ngen <- 1000
fA <- numeric(ngen)
fA[1] <- 0.01
for (gen in 2:ngen){
# UNCOMMENT THE FOLLOWING LINE AND COMPLETE IT:
#fA[gen] <-
}
### KEY below ###
for (gen in 2:ngen){
fA[gen] <- ( wA * fA[gen-1] ) / (wA * fA[gen-1] + wa * (1-fA[gen-1]) )
}
fA[100]
# Reproducing Fig. 7.2 from the book:
plot(fA,
type = "l", # make this a line plot
ylab = "fA(t)",
xlab = "t (in generations)")
# fitness of each genotype
waa <- 0.6
wAa <- 0.8
wAA <- 1
ngen <- 50
fA <- numeric(ngen)
fA[1] <- 0.01
for (gen in 2:ngen){
# UNCOMMENT THE FOLLOWING LINE AND COMPLETE IT (add as many lines of code and intermediate variables as you see need for):
# fA[gen] <-
}
### KEY BELOW ###
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
# Reproducing Fig. 7.2 from the book:
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)")
###KEY###
wAA <- 1
wAa <- 1
waa <- 0.1
ngen <- 100
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="red")
waa <- 0.5
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="blue")
waa <- 0.8
fA <- numeric(ngen)
fA[1] <- 0.1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",
ylim=c(0,1),
col="green")
wAA <- 0.8
wAa <- 1
waa <- 0.7
ngen <- 300
fA <- numeric(ngen)
fA[1] <- 0.01
###KEY STARTING BELOW###
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)")
wAA <- 0.9
wAa <- 0.8
waa <- 1
ngen <- 100
fA <- numeric(ngen)
### KEY ###
fA[1] <- 0.6
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
fA[1] <- 0.7
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
par(new=F)
wAA <- 0.9
wAa <- 0.8
waa <- 1
ngen <- 100
fA <- numeric(ngen)
fA[1] <- 0.6
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
fA[1] <- 0.7
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
par(new=T)
plot(fA,
type = "l",
ylab = "fA(t)",
xlab = "t (in generations)",ylim=c(0,1))
par(new=F)
# genotypic fitness
wAA <- 1
wAa <- # what is this if a is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <- 0.9
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "red")
legend(250,0.3,"A recessive",col="red",lty = 1)
# genotypic fitness
wAA <- 1
wAa <- # what is this if a is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <- 0.9
for (gen in 2:ngen){
w_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / w_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "red")
legend(250,0.3,"A recessive",col="red",lty = 1)
wAA <- 1
wAa <-  # what is this if A is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <-  1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
par(new=T)
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "blue")
legend(250,0.2,"A dominant",col="blue",lty = 1)
wAA <- 1
wAa <-  # what is this if A is the dominant allele?
waa <- 0.9
# vector to store frequency of A in 300 generations
ngen <- 300
fA <- numeric(ngen)
# starting frequency of A in generation 1
fA[1] <- 0.05
# write your for loop below to compute fA in the next 299 generations
### KEY ###
wAa <-  1
for (gen in 2:ngen){
v_bar <-  wAA*fA[gen-1]^2 + 2 * wAa * fA[gen-1] *(1-fA[gen-1]) + waa * (1-fA[gen-1])^2
fA[gen] <- ( wAA * fA[gen-1]^2 + wAa * fA[gen-1]*(1-fA[gen-1]) ) / v_bar
}
###########
# Plotting tricks used below:
# If you add `par(new=T)` before you plot fA, the lines are overlayed in the same plot.
# If you add `par(mfrow=c(3,1))` it plots 3 plots in the same figure.
# To specify colors to your line plot you can use `col='red'` as one of the plot arguments.
# To add a legend, check up the help for the legend function: `?legend`
# plot your result
plot(fA,
type = "l",
ylim = c(0,1),
ylab = "fA(t)",
xlab = "t (in generations)",
col = "blue")
legend(250,0.2,"A dominant",col="blue",lty = 1)
0.25 - (0.75*0.25)
0.25 - (0.75*0.75)
0.5 -0.75*0.75
7/9
.7/.9
0.4^2*(0.9/0.9) + 0.6^2(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
0.4^2*(0.9/0.9) + 0.6^2(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
0.4^2*(0.9/0.9) + 0.6^2*(0.7/0.9) + 2 * 0.4 * 0.6 * (0.8/0.9)
fA=.4
fa=1-fA
wAA=.9
wAa=.8
waa=.7
w_bar = wAA*fA^2 + 2 * wAa * fA *fa + waa * fa^2
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wA*afA
w_bar_A = wAA*fA+wAa*afA
w_bar_A = wAA*fA+wAa*fA
fA_prime= (fA*w_bar_A)/w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa) ) / w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa)  / w_bar
w_bar_A*fA
( wAA * fA^2 + wAa * fA*fa)
( wAA * fA + wAa *fa)*fA
#w_bar_A= .68
w_bar_A = wAA*fA+wAa*fa
w_bar_A*fA
#Next gen
fA_prime= (fA*w_bar_A)/w_bar
fA_prime2= ( wAA * fA^2 + wAa * fA*fa)  / w_bar
rwAA=.9/wAA
rwAA=.9/wAA
rwAA=.9/wAA
rwAa=.8/wAA
rwaa=.7/wAA
#With relative
#w_bar= .78
rw_bar = rwAA*fA^2 + 2 * rwAa * fA *fa + rwaa * fa^2
#w_bar_A= .84
rw_bar_A = rwAA*fA+rwAa*fa
#Next gen fA=.43
rfA_prime= (fA*rw_bar_A)/rw_bar
rfA_prime2= ( rwAA * fA^2 + rwAa * fA*fa)  / rw_bar
0.9*0.4 + 0.8*(1-0.4)
35/92
57/92
50/92
53/92
55/92
56/92
0.005 / 0.005 + 0.77378 * (0.995)
0.005 / (0.005 + 0.77378 * 0.995)
52/92
62/92
.6*3
.6*5
218-3
215/218
1-.13
1-.013
76/91
77/91
77/92
fA <- 0.01fa <- 1-fA# relative fitness of alleleswA <- 1wa <- 0.99# selection coefficients <- wA-wat <-100### Code your answer herefA/(fA+(1-s)^t(fa))
fA <- 0.01fa <- 1-fA
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fA <- 0.01
fa <- 1-fA
# relative fitness of alleles
wA <- 1wa <- 0.99
# selection coefficient
s <- wA-wat <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
# selection coefficient
s <- wA-wa
t <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
# selection coefficient
s <- wA-wa
# relative fitness of alleles
wA <- 1
wa <- 0.99
# selection coefficient
s <- wA-wa
t <-100
### Code your answer here
fA/(fA+(1-s)^t(fa))
### Code your answer here
fA/(fA+(1-s)^t*(fa))
pchisq(5.571008)
pchisq(5.571008,df=1)
pchisq(8.626967 ,df=1, lower.tail=FALSE)
library(recolorize)
img_cmr <- readImage("~/Documents/Opumilio/Samples/photos for Diana/CMR06_Br30.png",
resize=.65,rotate=270)
dim(img)
recolorize_cmr <- recolorize2(img_cmr,cutoff=5)
setwd("~/Documents/GitHub/frogFun")
img_cl <- readImage("sampleImages/Cemetery/Red/CM_UN_01-PD.png",
resize=.65,rotate=90)
recolorize_cl <- recolorize2(img_cl,cutoff=25)
img <- readImage("sampleImages/Cemetery/Red/CM_UN_02-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=25)
recolorize <- recolorize2(img,cutoff=5)
img <- readImage("sampleImages/Cemetery/Red/CMR01-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=5)
recolorize <- recolorize2(img,cutoff=2)
library(recolorize)
img <- readImage("sampleImages/Cemetery/Red/CMR01-PD.png",
resize=.65,rotate=90)
dim(img)
recolorize <- recolorize2(img,cutoff=2)
